#!/usr/bin/python
# Software License Agreement (BSD License)
#
# Copyright (c) 2012, I Heart Engineering
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above
#    copyright notice, this list of conditions and the following
#    disclaimer in the documentation and/or other materials provided
#    with the distribution.
#  * Neither the name of the I Heart Engineering nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Requires pyusb-1.0
# sudo easy_install pyusb
#################

import subprocess
import usb.core
import usb.util
import getpass
import os
import sys
import shutil

#################
# Globals

MAX_ISERIAL_LEN = 8;
create_iserial = "";
arm_iserial = "";
armed = False;
output_dir = "";
output_mode = "tmp";
udev_rule = "70-turtlebot-auto.rules";

#################
# Functions

def is_root():
    return (getpass.getuser() == "root")

def get_ftdi_count():
    dev = usb.core.find(find_all=True,idVendor=0x0403, idProduct=0x6001)
    if dev is None:
        return 0
    return len(dev)

def generate_robot_launch():
    if (os.path.isfile("%s/robot.launch"%output_dir)):
        os.unlink("%s/robot.launch"%output_dir)
    launch_file = open("%s/robot.launch"%output_dir, "w")
    if (os.path.isdir("/proc/acpi/battery/BAT0")):
        acpi_path = "/proc/acpi/battery/BAT0";
    elif (os.path.isdir("/proc/acpi/battery/BAT1")):
        acpi_path = "/proc/acpi/battery/BAT1";
    else:
        acpi_path = "/proc/acpi/battery/BAT0";
#  <param name="turtlebot_node/acpi_path" value="/proc/acpi/battery/BAT0"/>
    print >> launch_file, """\
<!-- TurtleBot Launch File Autogenerated by turtlebot-config -->
<launch>

  <param name="turtlebot_node/gyro_scale_correction" value="1.0"/>
  <param name="turtlebot_node/odom_angular_scale_correction" value="1.0"/>
  <param name="turtlebot_node/port" value="/dev/irobot_create"/>"""
    print >> launch_file, '  <param name="turtlebot_node/acpi_path" value="%s"/>'%acpi_path
    print >> launch_file, """\
  <include file="$(find turtlebot_bringup)/minimal.launch">
    <arg name="urdf_file" value="$(find xacro)/xacro.py '$(find turtlebot_description)/urdf/turtlebot.urdf.xacro'" />
  </include>

</launch>
"""
    launch_file.close()

def generate_udev_rule():
    if (output_mode == "etc"):
        udev_dir = "/etc/udev/rules.d"
    elif (output_mode == "tmp"):
        udev_dir = output_dir
    else:
        exit(1)
    if (os.path.isfile("%s/%s"%(udev_dir,udev_rule))):
        os.unlink("%s/%s"%(udev_dir,udev_rule))
    udev_file = open("%s/%s"%(udev_dir,udev_rule), "w")
    print >> udev_file, """\
# Turtlebot FTDI rules Autogenerated by turtlebot-config
SUBSYSTEMS=="usb", ENV{ID_MODEL}=="", IMPORT{program}="usb_id --export %p"
SUBSYSTEMS=="usb", ENV{ID_MODEL_FROM_DATABASE}=="", IMPORT{program}="usb-db %p"
SUBSYSTEMS=="usb", ATTRS{idVendor}!="", ATTRS{idProduct}!="", ENV{ID_VENDOR_ID}="$attr{idVendor}", ENV{ID_MODEL_ID}="$attr
{idProduct}"

ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", MODE="664", OWNER="turtlebot", GROUP="turtlebot"
"""
    print >> udev_file, 'ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", ENV{ID_SERIAL_SHORT}=="%s", SYMLINK+="irobot_create"' % create_iserial
    if (armed):
        print >> udev_file, 'ATTRS{idVendor}=="0403", ATTRS{idProduct}=="6001", ENV{ID_SERIAL_SHORT}=="%s", SYMLINK+="turtlebot_arm"' % arm_iserial
    udev_file.close()

def dialog_run_as_root():
    p = subprocess.Popen(['zenity','--warning','--text=This configuration tool must be run as root','--title=TurtleBot Config Tool'], stdout=subprocess.PIPE)
    output = p.communicate()[0]
    p.wait()

def dialog_stop_roscore():
    cmd = 'zenity --progress --text="Stopping TurtleBot Services" --timeout=2 --pulsate --no-cancel --auto-close --title=TurtleBot Config Tool < /dev/zero'
    subprocess.call(cmd,shell=True)

def dialog_etcros_unlink():
    rc = subprocess.call(['zenity','--question','--ok-label=OK','--cancel-label=Cancel','--text=Writing ROS configuration files to /etc/ros, the udev rules\nwill be written to /etc/udev/rules.d\n\nThe default configuration can be found in /etc/ros-fuerte','--title=TurtleBot Config Tool'], stdout=subprocess.PIPE)
    if rc:
        exit()

def dialog_etcros_tmp():
    rc = subprocess.call(['zenity','--question','--ok-label=OK','--cancel-label=Cancel','--text=Configuration files found in /etc/ros\nWriting configuration files to /tmp/turtlebot-config','--title=TurtleBot Config Tool'], stdout=subprocess.PIPE)
    if rc:
        exit()

def dialog_restart_udev():
    cmd = 'zenity --progress --text="Restarting udev Service" --timeout=1 --pulsate --no-cancel --auto-close --title=TurtleBot Config Tool < /dev/zero'
    subprocess.call(cmd,shell=True)

def dialog_start_roscore():
    cmd = 'zenity --progress --text="Starting TurtleBot Services" --timeout=1 --pulsate --no-cancel --auto-close --title=TurtleBot Config Tool < /dev/zero'
    subprocess.call(cmd,shell=True)

def dialog_unplug_all():
    rc = subprocess.call(['zenity','--question','--ok-label=OK','--cancel-label=Cancel','--text=Please unplug all USB cables.','--title=TurtleBot Config Tool'], stdout=subprocess.PIPE)
    if rc:
        exit()

def dialog_plug_create():
    rc = subprocess.call(['zenity','--question','--ok-label=OK','--cancel-label=Cancel','--text=Connect iRobot Create USB serial cable.','--title=TurtleBot Config Tool'], stdout=subprocess.PIPE)
    if rc:
        exit()

def dialog_armed():
    rc = subprocess.call(['zenity','--question','--text=Is this robot equipped with a TurtleBot Arm?','--title=TurtleBot Config Tool'])
    return not rc

def dialog_plug_arm():
    rc = subprocess.call(['zenity','--question','--ok-label=OK','--cancel-label=Cancel','--text=Connect TurtleBot Arm USB cable.','--title=TurtleBot Config Tool'], stdout=subprocess.PIPE)
    if rc:
        exit()


#################
def gui(argv):
    if (not is_root()):
        dialog_run_as_root()
        exit()

    if (not os.path.isdir("/etc/ros") or os.path.islink("/etc/ros")):
        dialog_etcros_unlink()
        output_dir="/etc/ros"
        output_mode="etc"
        if (os.path.isdir(output_dir)):
            os.unlink(output_dir)
        os.makedirs(output_dir)
    else:
        dialog_etcros_tmp()
        output_dir="/tmp/turtlebot-config"
        output_mode="tmp"
        if (os.path.isdir(output_dir)):
            shutil.rmtree(output_dir)
        os.makedirs(output_dir)

    if (output_mode == "etc"):
        status = subprocess.call("initctl stop turtlebot&",shell=True,stderr=subprocess.PIPE)
        if (status == 0):
            dialog_stop_roscore()

    status = subprocess.call("cp /etc/ros-fuerte/setup.* %s"%output_dir,shell=True,stderr=subprocess.PIPE)
    status = subprocess.call("cp /etc/ros-fuerte/network.conf %s"%output_dir,shell=True,stderr=subprocess.PIPE)
    status = subprocess.call("cp -pr /etc/ros-fuerte/urdf %s"%output_dir,shell=True,stderr=subprocess.PIPE)
    readme_file = open("%s/README"%output_dir, "w")
    print >> readme_file, "These config files were generated automatically by turtlebot-config"
    readme_file.close()

    while (get_ftdi_count() > 0):
        dialog_unplug_all()

    while (get_ftdi_count() != 1):
        dialog_plug_create()

    dev = usb.core.find(find_all=True,idVendor=0x0403, idProduct=0x6001)
    for i in range(len(dev)):
        create_iserial = usb.util.get_string(dev[i],MAX_ISERIAL_LEN,dev[i].iSerialNumber)

    armed = dialog_armed()

    if armed:
        while (get_ftdi_count() != 2):
            dialog_plug_arm()

        if (armed == True):
            dev = usb.core.find(find_all=True,idVendor=0x0403, idProduct=0x6001)
            for i in range(len(dev)):
                temp_iserial = usb.util.get_string(dev[i],MAX_ISERIAL_LEN,dev[i].iSerialNumber)
                if (temp_iserial != create_iserial):
                    arm_iserial = temp_iserial

    generate_robot_launch()
    generate_udev_rule()

    if (output_mode == "etc"):
        status = subprocess.call("initctl restart udev&",shell=True,stderr=subprocess.PIPE)
        if (status == 0 ):
            dialog_restart_udev()
        status = subprocess.call("rmmod ftdi_sio",shell=True,stderr=subprocess.PIPE)
        status = subprocess.call("modprobe ftdi_sio",shell=True,stderr=subprocess.PIPE)
        status = subprocess.call("initctl start turtlebot&",shell=True,stderr=subprocess.PIPE)
        if (status == 0 ):
            dialog_start_roscore()

if __name__ == '__main__':
    global script_dir
    script_dir = os.path.abspath(os.path.dirname(sys.argv[0]))

    if len(sys.argv) == 1:
        gui(sys.argv)

